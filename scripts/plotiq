#!/usr/bin/env python

"""
Plot the intensity profile of a shot or shotset in an appealing manner.
"""

import numpy as np
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import matplotlib.cm as cm

from odin import xray
from odin.utils import odinparser
from odin.plot import InteractiveImshow


def main(input_file, max_intensity=0, npoints=1000):
    
    shotset = xray.Shotset.load(input_file)
    I = shotset.intensity_profile()
    
    q_edge = 0.4
    if max_intensity == 0:
        x = np.argsort( np.abs(I[:,0] - q_edge) )[0] # index closest to 0.4 inv A
        max_intensity = I[x,1]
    else:
        q_edge = 0.0
        
    print 'Max. Intensity Cutoff: %f' % max_intensity
    print 'Minimum value of q at that cutoff (A^-1): %f' % q_edge
    
    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,5.5))
    #fig.tight_layout()
    
    ax[0].plot(I[:,0], I[:,1], lw=2)
    ax[0].set_xlabel(r'q / $\AA^{-1}$')
    ax[0].set_ylabel(r'I(q)')
    ax[0].set_ylim([ np.min(I[:,1]), max_intensity ])
    ax[0].set_xlim([ q_edge, np.max(I[:,0]) ])
    ax[0].set_yticklabels([])
    
    npoints = 1000
    i_assembled = shotset.assemble_image(num_x=npoints, num_y=npoints)
    
    im = ax[1].imshow(i_assembled.T, cmap=cm.jet, interpolation="nearest")
    im.set_clim(0.0, max_intensity)
    ax[1].set_xlabel('x')
    ax[1].set_ylabel('y')
    ax[1].set_xticklabels([])
    ax[1].set_yticklabels([])
    
    # if we scroll, zoom in/out
    def on_scroll(event):
        
        lims = im.get_clim()
        speed = 1.1

        if event.button == 'up':
            colmax = lims[1] / speed
        elif event.button == 'down':
            colmax = lims[1] * speed

        im.set_clim(lims[0], colmax)
        ax[0].set_ylim([ lims[0], colmax ])
        plt.draw()
        
    def on_keypress(event):
        if event.key == 'r':
            output = raw_input('Enter filename to save as: ')
            plt.savefig(output, bbox_inches='tight')
            print "Saved: %s" % output
    
    fig.canvas.mpl_connect('scroll_event', on_scroll)
    fig.canvas.mpl_connect('key_press_event', on_keypress)
    
    plt.show()
    
    return
    
    
if __name__ == '__main__':
    
    parser = odinparser('Plot intensity profile of a shotset.')
    
    parser.add_argument('input', type=str, help='An hdf shotset file.')
    parser.add_argument('-m', '--max', type=float, default=0,
                        help='Maximum intensity to plot (simulated beamstop).'
                             ' Default: Value at 0.4 1/A')

    args = parser.parse_args()
    
    main(args.input, max_intensity=args.max)

